#LyX 1.5.5 created this file. For more info see http://www.lyx.org/
\lyxformat 276
\begin_document
\begin_header
\textclass article
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\paperfontsize default
\spacing single
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
eLyXer Programming Guide
\end_layout

\begin_layout Author
Alex Fern√°ndez (elyxer@gmail.com)
\end_layout

\begin_layout Section
The Basics
\end_layout

\begin_layout Standard
This document should help you get started extending eLyXer.
 In this section we will outline eLyXer performs its basic tasks.
\end_layout

\begin_layout Subsection

\family typewriter
Container
\family default
s
\end_layout

\begin_layout Standard
The following figure 
\begin_inset LatexCommand ref
reference "fig:Container-structure"

\end_inset

 shows how a 
\family typewriter
Container
\family default
 works.
 Each type of 
\family typewriter
Container
\family default
 should have a 
\family typewriter
parser
\family default
 and an 
\family typewriter
output
\family default
, and a list of 
\family typewriter
contents
\family default
.
 The 
\family typewriter
parser
\family default
 object receives LyX input and produces a list of 
\family typewriter
contents
\family default
 that is stored in the 
\family typewriter
Container
\family default
.
 The 
\family typewriter
output
\family default
 object then converts that 
\family typewriter
contents
\family default
 to a portion of valid HTML code.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Standard
\align center
\begin_inset Graphics
	filename container.eps

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:Container-structure"

\end_inset

Container structure.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Two important class attributes of a 
\family typewriter
Container
\family default
 are:
\end_layout

\begin_layout Itemize

\family typewriter
start
\family default
: a string of text containing the LyX command that we are about to process;
\end_layout

\begin_layout Itemize
and 
\family typewriter
ending
\family default
, which is used on some 
\family typewriter
Container
\family default
s to determine when to stop parsing.
\end_layout

\begin_layout Standard
A class called 
\family typewriter
ContainerFactory
\family default
 has the responsibility of creating the appropriate containers, as the strings
 in their 
\family typewriter
start
\family default
 attributes are found.
\end_layout

\begin_layout Standard
The basic method of a 
\family typewriter
Container
\family default
 is:
\end_layout

\begin_layout Itemize

\family typewriter
process()
\family default
: called after parsing the LyX text and before outputting the HTML result.
 Here the 
\family typewriter
Container
\family default
 can alter its 
\family typewriter
contents
\family default
 as needed.
\end_layout

\begin_layout Standard
Now we will see each subordinate class in detail.
\end_layout

\begin_layout Subsection

\family typewriter
Parser
\family default
s
\end_layout

\begin_layout Standard
A 
\family typewriter
Parser
\family default
 has two main methods: 
\family typewriter
parseheader()
\family default
 and 
\family typewriter
parse()
\family default
.
\end_layout

\begin_layout Description

\family typewriter
parseheader()
\family default
: parses the first line and returns the contents as a list of words.
 This method is common for all 
\family typewriter
Parser
\family default
s.
 For example, for the command 
\family typewriter
'
\backslash

\backslash
emph on'
\family default
 the 
\family typewriter
Parser
\family default
 will return a list 
\family typewriter
['
\backslash

\backslash
emph','on']
\family default
.
 This list will end up in the 
\family typewriter
Container
\family default
 as an attribute 
\family typewriter
header
\family default
.
\end_layout

\begin_layout Description

\family typewriter
parse()
\family default
: parses all the remaining lines of the command.
 They will end up in the 
\family typewriter
Container
\family default
 as an attribute 
\family typewriter
contents
\family default
.
 This method depends on the particular 
\family typewriter
Parser
\family default
 employed.
\end_layout

\begin_layout Standard
Most 
\family typewriter
Parser
\family default
s reside in the file 
\family typewriter
parse.py
\family default
.
 Among them are the following usual classes:
\end_layout

\begin_layout Description

\family typewriter
LoneCommand
\family default
: parses a single line containing a LyX command.
\end_layout

\begin_layout Description

\family typewriter
BoundedParser
\family default
: reads until it finds the 
\family typewriter
ending
\family default
.
 For each line found inside, the 
\family typewriter
BoundedParser
\family default
 will call the 
\family typewriter
ContainerFactory
\family default
 to recursively parse its contents.
 Then the parser returns everything found inside as a list.
\end_layout

\begin_layout Subsection
Outputs
\end_layout

\begin_layout Standard
Common outputs reside in 
\family typewriter
output.py
\family default
.
 They have just one method:
\end_layout

\begin_layout Description

\family typewriter
gethtml()
\family default
: processes the contents of a 
\family typewriter
Container
\family default
 and returns a list with file lines.
 Carriage returns 
\family typewriter

\backslash
n
\family default
 must be added manually at the desired points; eLyXer will just merge all
 lines and write them to file.
\end_layout

\begin_layout Standard
Outputs do not however inherit from a common class; all you need is an object
 with a method 
\family typewriter
gethtml(self,container)
\family default
 that processes the 
\family typewriter
Container
\family default
's 
\family typewriter
contents
\family default
 list attribute.
\end_layout

\begin_layout Subsection
Preprocessors
\end_layout

\begin_layout Standard
The file 
\family typewriter
preprocessor.py
\family default
 contains some preprocessing to be done on 
\family typewriter
Container
\family default
s before they are output.
 Preprocessing is deactivated at the time since it needs some context, not
 just the current 
\family typewriter
Container
\family default
.
\end_layout

\begin_layout Subsection
Tutorial: Adding Your Own 
\family typewriter
Container
\end_layout

\begin_layout Standard
If you want to add your own 
\family typewriter
Container
\family default
 to the processing you do not need to modify all these files.
 You just need to create your own source file that includes the 
\family typewriter
Container
\family default
, the 
\family typewriter
Parser
\family default
 and the 
\family typewriter
output
\family default
 (or reuse existing ones).
 Once it is added to the 
\family typewriter
types
\family default
 in the 
\family typewriter
ContainerFactory
\family default
 eLyXer will happily start matching it against LyX commands as they are
 parsed.
\end_layout

\begin_layout Standard
There are good examples of parsing commands in just one file in 
\family typewriter
image.py
\family default
 and 
\family typewriter
formula.py
\family default
.
 But let us build our own container 
\family typewriter
BibitemInset
\family default
 here.
 We want to parse the LyX command in listing 
\begin_inset LatexCommand ref
reference "alg:bibitem-command"

\end_inset

.
 In the resulting HTML we will generate an anchor: a single tag 
\family typewriter
<a name="mykey">
\family default
 with fixed text 
\family typewriter
"[ref]"
\family default
.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Quotation

\family typewriter

\backslash
begin_inset CommandInset bibitem
\end_layout

\begin_layout Quotation

\family typewriter
LatexCommand bibitem
\end_layout

\begin_layout Quotation

\family typewriter
key "mykey"
\end_layout

\begin_layout Quotation

\family typewriter

\backslash
end_inset
\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "alg:bibitem-command"

\end_inset

The LyX command to parse.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
We will call the 
\family typewriter
Container
\family default
 
\family typewriter
BibitemInset
\family default
, and it will process precisely the inset that we have here.
 We will place the class in 
\family typewriter
bibitem.py
\family default
.
 So this file starts as shown in listing 
\begin_inset LatexCommand ref
reference "alg:bibitem-class"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Quotation

\family typewriter
class BibitemInset(Container):
\end_layout

\begin_layout Quotation

\family typewriter
\InsetSpace ~
\InsetSpace ~
"An inset containing a bibitem command"
\end_layout

\begin_layout Quotation

\family typewriter
\InsetSpace ~
\InsetSpace ~

\end_layout

\begin_layout Quotation

\family typewriter
\InsetSpace ~
\InsetSpace ~
start = '
\backslash

\backslash
begin_inset CommandInset bibitem'
\end_layout

\begin_layout Quotation

\family typewriter
\InsetSpace ~
\InsetSpace ~
ending = '
\backslash

\backslash
end_inset'
\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "alg:bibitem-class"

\end_inset

Class definition for 
\family typewriter
BibitemInset
\family default
.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
We can use the parser for a bounded command with start and ending, 
\family typewriter
BoundedParser
\family default
.
 For the output we will generate a single HTML tag 
\family typewriter
<a>
\family default
, so the 
\family typewriter
TagOutput()
\family default
 is appropriate.
 Finally we will set the 
\family typewriter
breaklines
\family default
 attribute to 
\family typewriter
False
\family default
, so that the output shows the tag in the same line as the contents: 
\family typewriter
<a \SpecialChar \ldots{}
>[ref]</a>
\family default
.
 Listing 
\begin_inset LatexCommand ref
reference "alg:bibitem-init"

\end_inset

 shows the constructor.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Quotation

\family typewriter
\InsetSpace ~
\InsetSpace ~
def __init__(self):
\end_layout

\begin_layout Quotation

\family typewriter
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
self.parser = BoundedParser()
\end_layout

\begin_layout Quotation

\family typewriter
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
self.output = TagOutput()
\end_layout

\begin_layout Quotation

\family typewriter
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
self.tag = 'a'
\end_layout

\begin_layout Quotation

\family typewriter
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
self.breaklines = False
\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "alg:bibitem-init"

\end_inset

Constructor for 
\family typewriter
BibitemInset
\family default
.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\family typewriter
BoundedParser
\family default
 will automatically parse the header and the contents.
 In the 
\family typewriter
process()
\family default
 method we will discard the first line with the 
\family typewriter
LatexCommand
\family default
, and place the key from the second line as link destination.
 The class 
\family typewriter
StringContainer
\family default
 holds string constants; in our case we will have to isolate the key by
 splitting the string around the double quote 
\family typewriter
"
\family default
, and then access the anchor with the same name.
 The contents will be set to the fixed string 
\family typewriter
[ref]
\family default
.
 The result is shown in listing 
\begin_inset LatexCommand ref
reference "alg:bibitem-process"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Quotation

\family typewriter
\InsetSpace ~
\InsetSpace ~
def process(self):
\end_layout

\begin_layout Quotation

\family typewriter
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
#skip first line
\end_layout

\begin_layout Quotation

\family typewriter
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
del self.contents[0]
\end_layout

\begin_layout Quotation

\family typewriter
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
# parse second line: fixed string
\end_layout

\begin_layout Quotation

\family typewriter
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
string = self.contents[0]
\end_layout

\begin_layout Quotation

\family typewriter
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
# split around the "
\end_layout

\begin_layout Quotation

\family typewriter
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
key = string.contents[0].split('"')[1]
\end_layout

\begin_layout Quotation

\family typewriter
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
# make tag and contents
\end_layout

\begin_layout Quotation

\family typewriter
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
self.tag = 'a name="' + key + '"'
\end_layout

\begin_layout Quotation

\family typewriter
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
string.contents[0] = '[ref] '
\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "alg:bibitem-process"

\end_inset

Processing for 
\family typewriter
BibitemInset
\family default
.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
And then we have to add the new class to the types parsed by the 
\family typewriter
ContainerFactory
\family default
; this has to be done outside the class definition.
 The complete file is shown in listing 
\begin_inset LatexCommand ref
reference "alg:bibitem-complete"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Quotation

\family typewriter
from parser import *
\end_layout

\begin_layout Quotation

\family typewriter
from output import *
\end_layout

\begin_layout Quotation

\family typewriter
from container import *
\end_layout

\begin_layout Quotation

\family typewriter
\InsetSpace ~
\InsetSpace ~

\end_layout

\begin_layout Quotation

\family typewriter
class BibitemInset(Container):
\end_layout

\begin_layout Quotation

\family typewriter
\InsetSpace ~
\InsetSpace ~
"An inset containing a bibitem command"
\end_layout

\begin_layout Quotation

\family typewriter
\InsetSpace ~
\InsetSpace ~

\end_layout

\begin_layout Quotation

\family typewriter
\InsetSpace ~
\InsetSpace ~
start = '
\backslash

\backslash
begin_inset CommandInset bibitem'
\end_layout

\begin_layout Quotation

\family typewriter
\InsetSpace ~
\InsetSpace ~
ending = '
\backslash

\backslash
end_inset'
\end_layout

\begin_layout Quotation

\family typewriter
\InsetSpace ~
\InsetSpace ~

\end_layout

\begin_layout Quotation

\family typewriter
\InsetSpace ~
\InsetSpace ~
def __init__(self):
\end_layout

\begin_layout Quotation

\family typewriter
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
self.parser = BoundedParser()
\end_layout

\begin_layout Quotation

\family typewriter
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
self.output = TagOutput()
\end_layout

\begin_layout Quotation

\family typewriter
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
self.breaklines = False
\end_layout

\begin_layout Quotation

\family typewriter
\InsetSpace ~
\InsetSpace ~

\end_layout

\begin_layout Quotation

\family typewriter
\InsetSpace ~
\InsetSpace ~
def process(self):
\end_layout

\begin_layout Quotation

\family typewriter
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
#skip first line
\end_layout

\begin_layout Quotation

\family typewriter
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
del self.contents[0]
\end_layout

\begin_layout Quotation

\family typewriter
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
# parse second line: fixed string
\end_layout

\begin_layout Quotation

\family typewriter
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
string = self.contents[0]
\end_layout

\begin_layout Quotation

\family typewriter
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
# split around the "
\end_layout

\begin_layout Quotation

\family typewriter
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
key = string.contents[0].split('"')[1]
\end_layout

\begin_layout Quotation

\family typewriter
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
# make tag and contents
\end_layout

\begin_layout Quotation

\family typewriter
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
self.tag = 'a name="' + key + '"'
\end_layout

\begin_layout Quotation

\family typewriter
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
string.contents[0] = '[ref] '
\end_layout

\begin_layout Quotation

\family typewriter
\InsetSpace ~
\InsetSpace ~

\end_layout

\begin_layout Quotation

\family typewriter
ContainerFactory.types.append(BibitemInset)
\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "alg:bibitem-complete"

\end_inset

Full listing for 
\family typewriter
BibitemInset
\family default
.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The end result of processing the command in listing 
\begin_inset LatexCommand ref
reference "alg:bibitem-command"

\end_inset

 is a valid anchor:
\end_layout

\begin_layout Quotation

\family typewriter
<a name="mykey">[ref] </a>
\end_layout

\begin_layout Standard
The final touch is to make sure that the class is run, importing it in the
 main file 
\family typewriter
elyxer.py
\family default
, as shown in listing 
\begin_inset LatexCommand ref
reference "alg:bibitem-include"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Quotation

\family typewriter
\SpecialChar \ldots{}

\end_layout

\begin_layout Quotation

\family typewriter
from structure import *
\end_layout

\begin_layout Quotation

\family typewriter
\series bold
from bibitem import *
\end_layout

\begin_layout Quotation

\family typewriter
from container import *
\end_layout

\begin_layout Quotation

\family typewriter
\SpecialChar \ldots{}

\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "alg:bibitem-include"

\end_inset

Importing the 
\family typewriter
BibitemInset
\family default
 from the main file.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Now this 
\series bold
Container
\series default
 is not too refined: the link text is fixed, and we need to do additional
 processing on the bibitem entry to show consecutive numbers.
 The approach is not very flexible either: e.g.
 anchor text is fixed.
 But in less than 20 lines we have parsed a new LyX command and have outputted
 valid, working XHTML code.
 The actual code is a bit different but follows the same principles; it
 can be found in 
\family typewriter
src/link.py
\family default
: in the classes 
\family typewriter
BiblioCite
\family default
 and 
\family typewriter
BiblioEntry
\family default
, and it processes bibliography entries and citations (with all our missing
 bits) in about 50 lines.
\end_layout

\begin_layout Section
Advanced Features
\end_layout

\begin_layout Standard
This section tackles other, more complex features.
 Not all of them are included in the current version.
\end_layout

\begin_layout Subsection
Parse Tree
\begin_inset LatexCommand label
name "sub:Parse-Tree"

\end_inset


\end_layout

\begin_layout Standard
On initialization of the 
\family typewriter
ContainerFactory
\family default
, a 
\family typewriter
ParseTree
\family default
 is created to quickly pass each incoming LyX command to the appropriate
 containers, which are created on demand.
 For example, when the 
\family typewriter
ContainerFactory
\family default
 finds a command:
\end_layout

\begin_layout Quotation

\family typewriter

\backslash

\backslash
emph on
\end_layout

\begin_layout Standard
it will create and initialize an 
\family typewriter
EmphaticText
\family default
 object.
 The 
\family typewriter
ParseTree
\family default
 works with words: it creates a tree where each keyword has its own node.
 At that node there may be a leaf, which is a 
\family typewriter
Container
\family default
 class, and/or additional branches that point to other nodes.
 If the tree finds a 
\family typewriter
Container
\family default
 leaf at the last node then it has found the right point; otherwise it must
 backtrack to the last node with a 
\family typewriter
Container
\family default
 leaf.
\end_layout

\begin_layout Standard
Figure 
\begin_inset LatexCommand ref
reference "fig:parsetree"

\end_inset

 shows a piece of the actual parse tree.
 You can see how if the string to parse is 
\begin_inset Quotes eld
\end_inset


\backslash
begin_inset LatexCommand
\begin_inset Quotes erd
\end_inset

, at the node for the second keyword 
\begin_inset Quotes eld
\end_inset

LatexCommand
\begin_inset Quotes erd
\end_inset

 there is no 
\family typewriter
Container
\family default
 leaf, just two more branches 
\begin_inset Quotes eld
\end_inset

label
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

ref
\begin_inset Quotes erd
\end_inset

.
 In this case the 
\family typewriter
ParseTree
\family default
 would backtrack to 
\begin_inset Quotes eld
\end_inset

begin_inset
\begin_inset Quotes erd
\end_inset

, and choose the generic 
\family typewriter
Inset
\family default
.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Standard
\align center
\begin_inset Graphics
	filename parse tree.eps

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:parsetree"

\end_inset

Portion of the parse tree.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Parsing is much faster this way, but there are disadvantages; for one, parsing
 can only be done using whole words and not prefixes.
 SGML tags (such as 
\family typewriter
<lyxtabular>
\family default
) pose particular problems: sometimes they may appear with attributes (as
 in 
\family typewriter
<lyxtabular version="3">
\family default
), and in this case the starting word is 
\family typewriter
<lyxtabular
\family default
 without the trailing 
\family typewriter
'>'
\family default
 character.
 So the parse tree removes any trailing 
\family typewriter
'>'
\family default
, and the start string would be just 
\family typewriter
<lyxtabular
\family default
; this way both starting words 
\family typewriter
<lyxtabular>
\family default
 and 
\family typewriter
<lyxtabular
\family default
 are recognized.
\end_layout

\begin_layout Subsection
Node Numbering
\end_layout

\begin_layout Standard
As eLyXer parses a LyX document it automatically numbers all chapters and
 sections.
 The code is, however, not ready yet for prime time and has been disabled.
\end_layout

\begin_layout Subsection
Mathematical Formulae
\end_layout

\begin_layout Standard
Formulae in LyX are rendered beautifully into TeX and PDF documents.
 For HTML the conversion is not so simple.
 There are basically three options:
\end_layout

\begin_layout Itemize
render the formula as an image (GIF or PNG), then import the image;
\end_layout

\begin_layout Itemize
export a specific language called MathML
\end_layout

\begin_layout Itemize
or render using a variety of Unicode characters, HTML and CSS wizardry 
\begin_inset LatexCommand cite
key "white-math"

\end_inset

.
\end_layout

\begin_layout Standard
eLyXer employs the third technique, with varied results.
 Basic fractions and square roots should be rendered fine, albeit at the
 moment there may be some issues pending.
 Complex fractions with several levels do not come out right.
 (But see subsection 
\begin_inset LatexCommand ref
reference "sub:MathML"

\end_inset

.)
\end_layout

\begin_layout Subsection
Distribution
\end_layout

\begin_layout Standard
You will notice that in the 
\family typewriter
src/
\family default
 folder there are several Python files, while in the main directory there
 is just a big one.
 The reason is that before distributing the source code is conflated and
 placed on the main directory, so that users can run it without worrying
 about libraries, directories and the such.
 (They need of course to have Python 2.5 installed.) And the weapon is a little
 Python script called 
\family typewriter
conflate.py
\family default
 that does the dirty job of parsing dependencies and inserting them into
 the main file.
 There is also a 
\family typewriter
make
\family default
 Bash script that takes care of permissions and generates the documentation.
 Just type
\end_layout

\begin_layout Quotation

\family typewriter
$ ./make
\end_layout

\begin_layout Standard
at the prompt.
 It is a primitive way perhaps to generate the 
\begin_inset Quotes eld
\end_inset

binary
\begin_inset Quotes erd
\end_inset

 (ok, not really a binary but a distributable Python file), but it works
 great.
\end_layout

\begin_layout Standard
At the moment there is no way to do this packaging on non-Unix operating
 systems with a single script, e.g.
 a Windows 
\family typewriter
.bat
\family default
 script.
 However the steps themselves are trivial.
\end_layout

\begin_layout Subsection
License and Contributions
\end_layout

\begin_layout Standard
eLyXer is published under the GPL, version 3 or later 
\begin_inset LatexCommand cite
key "stallman-gplv3"

\end_inset

.
 This basically means that you can modify the code and distribute the result
 as desired, as long as you publish your modifications under the same license.
 But consult a lawyer if you want an authoritative opinion.
\end_layout

\begin_layout Standard
All contributions will be published under this same license, so if you send
 them this way you implicitly give your consent.
 An explicit license grant would be even better and may be required for
 larger contributions.
\end_layout

\begin_layout Section
Future Extensions
\end_layout

\begin_layout Standard
The author has plans for the following extensions.
\end_layout

\begin_layout Subsection
Templates
\end_layout

\begin_layout Standard
Some header and footer content is automatically added to the resulting document.
 The use of templates might make the job far more flexible.
\end_layout

\begin_layout Subsection
Postprocessors
\end_layout

\begin_layout Standard
Some post-processing of the resulting HTML page could make the results look
 much better.
 The tool is called 
\family typewriter
posxer
\family default
.
\end_layout

\begin_layout Subsection
Page Segmentors
\end_layout

\begin_layout Standard
A page segmentor should build a set of pages and cross-reference them, but
 generally avoids the complexities of the internal structure.
 The tool is called 
\family typewriter
idxer
\family default
.
\end_layout

\begin_layout Standard
The tool uses templates to construct the header and footer.
\end_layout

\begin_layout Standard
The complete package should implement something like the flow in figure
 
\begin_inset LatexCommand ref
reference "fig:pipeline"

\end_inset

.
 This is the high-level design that has to be filled in with the missing
 tools.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Standard
\align center
\begin_inset Graphics
	filename pipeline.eps

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:pipeline"

\end_inset

Complete eLyXer pipeline.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
MathML
\begin_inset LatexCommand label
name "sub:MathML"

\end_inset


\end_layout

\begin_layout Standard
As suggested by G√ºnther Milne and Abdelrazak Younes 
\begin_inset LatexCommand cite
key "milde-mathml,younes-elyxer"

\end_inset

, MathML is by now well supported in e.g.
 Firefox.
 An option to emit MathML (instead of more-or-less clumsy HTML and CSS code)
 would be very useful.
\end_layout

\begin_layout Subsection
Roadmap
\end_layout

\begin_layout Standard
Basic tool support should be ready in Q1 2009 (end of March), including
 support for most common LyX documents.
 In Q2 2009 (i.e.
 by the end of June) the pipeline should be complete and running.
 LyX integration (as an external tool) is planned for Q3 2009.
 All this is within the usual constraints: day job, family, etc.
\end_layout

\begin_layout Section
Discarded Bits
\end_layout

\begin_layout Standard
Not everything that has been planned or can be done with eLyXer is planned;
 some extensions have been discarded.
 However, this means basically that the author is too ignorant to know how
 to do them right; help (and patches!) towards a sane implementation would
 be welcome if they fit with the design.
\end_layout

\begin_layout Subsection
Spellchecking
\end_layout

\begin_layout Standard
LyX can use a spellchecker to verify the words used.
 However it is not interactive so you may forget to run it before generating
 a version.
 It is possible to integrate eLyXer with a spellchecker and verify the spelling
 before generating the HTML, but it is not clear that it can be done cleanly.
\end_layout

\begin_layout Subsection
URL Checking
\end_layout

\begin_layout Standard
Another fun possibility is to make eLyXer check all the external URLs embedded
 in the document.
 However the Python facilities for URL checking are not very mature, at
 least with Python 2.5: some of them do not return errors, others throw complex
 exceptions that have to be parsed\SpecialChar \ldots{}
 It is far easier to just create the HTML
 page and use wget (or a similar tool) to recursively check all links in
 the page.
\end_layout

\begin_layout Subsection
Use of 
\family typewriter
lyx2lyx
\family default
 Framework
\end_layout

\begin_layout Standard
Abdelrazak Younes suggests using the 
\family typewriter
lyx2lyx
\family default
 framework, which after all already knows about LyX formats 
\begin_inset LatexCommand cite
key "younes-elyxer"

\end_inset

.
 It is an interesting suggestion, but one that for now does not fit well
 with the design of eLyXer: a standalone tool to convert between two formats,
 or as Kernighan and Plauger put it, a standalone 
\emph on
filter
\emph default
 
\begin_inset LatexCommand cite
key "kernighan-filters"

\end_inset

.
 Long-term maintenance might result a bit heavier with this approach though,
 especially if LyX changes to a different file format in the future.
\end_layout

\begin_layout Section
FAQ
\end_layout

\begin_layout Description
Q: I don't like how your tool outputs my document, what can I do?
\end_layout

\begin_layout Description
A: First make sure that you are using the proper CSS file, i.e.
 copy the existing 
\family typewriter
docs/lyx.css
\family default
 file to your web page directory.
 Next try to customize the CSS file to your liking; it is a flexible approach
 that requires no code changes.
 Changing code should be a last resort.
\end_layout

\begin_layout Description
Q: Why does your Python code suck so much? You don't make proper use of
 most features!
\end_layout

\begin_layout Description
A: Because I'm mostly a novice with little Python culture.
 If you want to help it suck less, please send mail and enlighten me.
\end_layout

\begin_layout Description
Q: How is the code maintained?
\end_layout

\begin_layout Description
A: It is kept in a 
\family typewriter
git
\family default
 repository.
 Patches in 
\family typewriter
git
\family default
 format are welcome (but keep in mind that my knowledge of 
\family typewriter
git
\family default
 is even shallower than my Python skills).
\end_layout

\begin_layout Description
Q: Why isn't the whole repository published?
\end_layout

\begin_layout Description
A: Basically, for lack of a hosting facility.
 Once a suitable place is found the 
\family typewriter
git
\family default
 repository will be published.
\end_layout

\begin_layout Description
Q: I found a bug, what should I do?
\end_layout

\begin_layout Description
A: Just report it to the author in a mail.
 In the future there might be some automated way to manage bugs.
\end_layout

\begin_layout Bibliography
\begin_inset LatexCommand bibitem
key "white-math"

\end_inset

S White: 
\begin_inset Quotes eld
\end_inset

Math in HTML with CSS
\begin_inset Quotes erd
\end_inset

, accessed March 2009.
 
\begin_inset LatexCommand url
target "http://www.zipcon.net/~swhite/docs/math/math.html"

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset LatexCommand bibitem
key "stallman-gplv3"

\end_inset

R S Stallman 
\emph on
et al
\emph default
: 
\begin_inset Quotes eld
\end_inset

GNU GENERAL PUBLIC LICENSE
\begin_inset Quotes erd
\end_inset

 version 3, 20070629.
 
\begin_inset LatexCommand url
target "http://www.gnu.org/copyleft/gpl.html"

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset LatexCommand bibitem
key "milde-mathml"

\end_inset

G Milde: 
\begin_inset Quotes eld
\end_inset

Re: eLyXer: LyX to HTML converter
\begin_inset Quotes erd
\end_inset

, message to list 
\emph on
lyx-devel
\emph default
, 20090309.
 
\begin_inset LatexCommand url
target "http://www.mail-archive.com/lyx-devel@lists.lyx.org/msg148627.html"

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset LatexCommand bibitem
key "younes-elyxer"

\end_inset

A Younes: 
\begin_inset Quotes eld
\end_inset

Re: eLyXer: LyX to HTML converter
\begin_inset Quotes erd
\end_inset

, message to list 
\emph on
lyx-devel
\emph default
, 20090309.
 
\begin_inset LatexCommand url
target "http://www.mail-archive.com/lyx-devel@lists.lyx.org/msg148634.html"

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset LatexCommand bibitem
key "kernighan-filters"

\end_inset

B W Kernighan, P J Plauger: 
\begin_inset Quotes eld
\end_inset

Software Tools
\begin_inset Quotes erd
\end_inset

, ed.
 Addison-Wesley Professional 1976, p.
 35.
\end_layout

\end_body
\end_document
