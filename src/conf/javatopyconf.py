#! /usr/bin/env python
# -*- coding: utf-8 -*-

# eLyXer configuration
# autogenerated from config file on 2010-03-12

class GeneralConfig(object):
  "Configuration class from config file"

  version = {
      u'date':u'2010-03-12', u'number':u'0.1', 
      }

class JavaToPyConfig(object):
  "Configuration class from config file"

  declarations = {
      u'$alphanum':u'[A-Z]|[a-z]|[0-9]|[_]', u'$alphanumeric':u'[$alphanum]+', 
      u'$andvalue':u'$value && $value', 
      u'$arithmeticexpression':u'$value + $value', 
      u'$assignment':u'$variablename = $value', u'$block':u'[$statement]*', 
      u'$class':u'$scope class $classname $inheritance { [$method]* }', 
      u'$classlist':[u'$classname][',u' $classname',], 
      u'$classname':u'$alphanumeric', u'$condition':u'$value|$logicalvalue', 
      u'$conditional':u'if ($condition) $block', 
      u'$declaration':u'$simpledeclaration|$declarationassignment', 
      u'$declarationassignment':u'$type $variablename = $value;', 
      u'$inheritance':u'[extends $classlist] [implements $classlist]', 
      u'$logicalvalue':u'$orvalue|$andvalue', 
      u'$method':u'$scope [$qualifier]* $methodname ( $paramsdeclaration ) { $block }', 
      u'$methodcall':u'$value.$methodname($params)', 
      u'$methodname':u'$alphanumeric', u'$orvalue':u'$value || $value', 
      u'$paramdeclaration':u'$type $variablename', 
      u'$params':u'[$value][,$value]+', 
      u'$paramsdeclaration':u'[$paramdeclaration][,$paramdeclaration]+', 
      u'$qualifier':u'static|final', u'$scope':u'public|private|protected', 
      u'$simpledeclaration':u'$type $variablename', 
      u'$statement':u'$conditional|$declaration|$assignment|$methodcall', 
      u'$type':u'int|String|$classname', 
      u'$value':u'$methodcall|$variablename|$arithmeticexpression', 
      u'$variablename':u'$alphanumeric', 
      }

  output = {
      u'$class':u'class $classname(object):\\n\\t[$method]*', 
      u'$classname':u'$classname', 
      u'$conditional':u'if $condition:\\n\\t$block', 
      u'$method':u'def $methodname:\\n\\t$block', 
      }

